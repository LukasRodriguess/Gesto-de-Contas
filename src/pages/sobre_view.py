import streamlit as st
from src.controllers.cadastro_controlador import validar_tags

#testando possibilidades e fun√ß√µes‚Üì

# opt = [".com", ".br"]

# col1, col2 = st.columns(2)
# name = col1.text_input("add")
# fim = col2.selectbox("", opt)
# if fim == ".com":
#     name = "www." + name + ".com"
# else:
#     name = "www." + name + ".com.br"

# img = f"https://img.logo.dev/{name}?token=pk_CAf7oMuYSwOwXAq2vzGCdg"
# st.image(img)
# st.divider()
# #---------------------------------------------------------------


# st.title("Festando Fun√ß√µes ‚Üì")
# texto1 = st.text_input("",placeholder="add URL",label_visibility='collapsed')

# validar_tags(texto1)

st.header("Cadastro de Sites: Teste de Valida√ß√µes", divider='red')

st.markdown(
    """
###### [![Em desenvolvimento](https://img.shields.io/badge/Status-Em%20Desenvolvimento-orange)](https://github.com/seu-usuario/sites_management) - [![My Skills](https://skillicons.dev/icons?i=django,python,supabase,aws,docker)](https://skillicons.dev) üëàüèª Tecnologias pensadas para o projeto
##### O projeto est√° no inicio e tem muita coisa para ser feita principalmente a tratativa de erros e coisas do tipo, mas espero que voc√™s possam testar e me dar uns feedbacks 
---
**Objetivo:**

Este projeto demonstra a cria√ß√£o de uma aplica√ß√£o web simples usando Streamlit para cadastrar sites. O foco principal √© mostrar como implementar fun√ß√µes de valida√ß√£o de dados para campos.

**Funcionalidades:**

* **Formul√°rio de Cadastro:** A aplica√ß√£o apresenta um formul√°rio para o usu√°rio cadastrar um novo site, incluindo campos para:
    * Nome do Site
    * URL do Site
    * Tags do Site
    * Senha Cadastrada
    * Email Cadastrado
* **Valida√ß√£o de Dados:**  As fun√ß√µes de valida√ß√£o implementadas verificam se os dados inseridos pelo usu√°rio est√£o no formato correto. Por exemplo:
    * **Nome:** O nome deve conter pelo menos uma letra, ter entre 4 e 15 caracteres e deve estar no formato "Primeira Letra Mai√∫scula". 
    * **URL:** A URL deve seguir o padr√£o "www.exemplo.com" ou "www.exemplo.com.br".
    * **Email:** O email deve ser v√°lido e seguir o formato "nome@dominio.com". 
    * **Senha:** A senha deve ter pelo menos 8 caracteres, incluindo letras mai√∫sculas, min√∫sculas, n√∫meros e caracteres especiais.
    * **Tags:** A tag deve conter apenas letras, ter entre 4 e 15 caracteres e n√£o pode conter espa√ßos.
* **Testar as Fun√ß√µes:** A aplica√ß√£o inclui uma se√ß√£o para testar as fun√ß√µes de valida√ß√£o individualmente, permitindo que o usu√°rio experimente diferentes entradas e veja como as valida√ß√µes funcionam.

**Como Usar:**

1. **Experimente o formul√°rio:** Use o formul√°rio de cadastro para inserir dados de um site e clique em "Cadastrar Site". Observe as mensagens de valida√ß√£o exibidas caso os dados inseridos n√£o estejam no formato correto.
2. **Teste as valida√ß√µes:**  Experimente inserir valores nos campos de teste e clique nos bot√µes "Validar Nome", "Validar URL", etc. para testar como as fun√ß√µes de valida√ß√£o funcionam.

--------------------------------------------------------------------------------
# Topicos de Melhorias gerias ‚Üì
1.  Modulariza√ß√£o e Reutiliza√ß√£o de C√≥digo:
      - **Fun√ß√µes e valida√ß√µes**: estudar a possbilidade de transformar o controlador e suas fun√ß√µes em uma classe validadora
      - **Classe modelo**: Adicionar os m√©todos atualizar_dados e excluir_conta.

2. Tratamento de erros:
   - **Mensagens de Erro Personalizadas**: As mensagens de erro gen√©ricas podem ser melhoradas para fornecer informa√ß√µes mais espec√≠ficas ao usu√°rio sobre o problema encontrado.
   - **Log de Erros**: Implemente um sistema de log para registrar erros e exce√ß√µes, facilitando a depura√ß√£o e manuten√ß√£o do c√≥digo.


3. Seguran√ßa:
   - **Hashing de Senhas:** Implementar hashing de senhas antes de armazenar no banco de dados. Utilizar bibliotecas como bcrypt ou Argon2
   - **Sanitiza√ß√£o de Dados:** Sanitizar os dados de entrada do usu√°rio para evitar ataques de inje√ß√£o SQL ou XSS.

4. Interface do Usu√°rio (UI):
   - **Feedback Visual:** Utilizar elementos visuais para fornecer feedback ao usu√°rio sobre as a√ß√µes realizadas, como anima√ß√µes, mensagens de sucesso ou erro.
   - **Layout Responsivo:** Me certificar de que a interface do usu√°rio seja responsiva e se adapte a diferentes tamanhos de tela.

5. Banco de Dados:
   - **Relacionamentos:** Explorar a possibilidade de criar relacionamentos entre as tabelas do banco de dados (ex: uma tabela de usu√°rios e uma tabela de sites associados a cada usu√°rio).
   - **√çndices:** Criar uma especie de √≠ndices nas colunas mais utilizadas nas consultas para otimizar o desempenho do banco de dados.

6. Testes:
   - **Testes Unit√°rios:** Implementar testes unit√°rios para garantir o funcionamento correto das fun√ß√µes e classes do meu projeto.

7. Documenta√ß√£o:
   - **Docstrings:** Adicionar docstrings √†s fun√ß√µes e classes para documentar o c√≥digo.
   - **Readme:** Manter o arquivo README.md com informa√ß√µes sobre o projeto, como instala√ß√£o, uso e contribui√ß√µes.

8. API Logo.Dev:
   - **Cache:** Implementar um sistema de cache para armazenar as URLs das logos geradas pela API Logo.Dev, evitando chamadas repetidas √† API.

9. Melhorias Espec√≠ficas:
   - **Cadastro de Sites:**
      - **Campos Obrigat√≥rios:** Utilizar o atributo `required` nos campos de formul√°rio para garantir que os campos obrigat√≥rios sejam preenchidos.
      - **Valida√ß√£o em Tempo Real:** Implementar valida√ß√µes em tempo real para os campos de formul√°rio, fornecendo feedback imediato ao usu√°rio sobre a validade dos dados.
   - **Exibi√ß√£o de Dados:**
      - **Pagina√ß√£o:** Implementar pagina√ß√£o para exibir grandes quantidades de dados de forma mais eficiente.
      - **Filtros e Ordena√ß√£o:** Permitir que o usu√°rio filtre e ordene os dados exibidos na tabela.

10. Ferramentas:
   - **Linters:** Utilizar linters como `pylint` ou `flake8` para identificar erros e problemas de estilo no c√≥digo.
   - **Formatadores de C√≥digo:** Utilizar formatadores de c√≥digo como `black` ou `yapf` para garantir a consist√™ncia do estilo de c√≥digo.


    """
)